#pragma lang : glsl
#pragma stage : vertex
#version 460 core

layout(binding = 0) uniform Translation {
    vec3 translation;
	uvec2 packed_rotation;
	vec3 scale;
} tr;

layout(binding = 1) uniform Camera {
    mat4 view_proj;
} cm;

layout(location = 0) in vec3 i_Position;
layout(location = 1) in vec2 i_TexCoord;

layout(location = 1) out vec2 o_TexCoord;

vec3 RotateByQuat(vec3 vertex, vec4 quat) {
	vec3 uv = cross(quat.xyz, vertex);
	vec3 uuv = cross(quat.xyz, uv);
	return vertex + ((uv * quat.w) + uuv) * 2.0;
};

void main() {
	vec4 rotation_quaternion = vec4(unpackSnorm2x16(tr.packed_rotation[0]), unpackSnorm2x16(tr.packed_rotation[1]));

	vec3 rotated_vertex = RotateByQuat(tr.scale * i_Position, rotation_quaternion);
	gl_Position = cm.view_proj * vec4(i_Position + rotated_vertex, 1);

	fragTexCoord = i_TexCoord;
}



#pragma stage : fragment
#version 460 core

layout(binding = 2) uniform sampler2D u_Albedo;

layout(location = 0) in vec2 i_TexCoord;

layout(location = 0) out vec4 final_color;

void main() {
	final_color = texture(u_Albedo, v_TexCoord);
}
